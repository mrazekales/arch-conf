#!/bin/bash
# ----------------------------------------------------------------------------------------
#           Arch Linux Installer
# ----------------------------------------------------------------------------------------
# author:     Mrazek Ales
#             https://github.com/mrazekales
#
# project:    https://github.com/mrazekales/myarch-installer
#
# license:    LGPL-3.0 (http://opensource.org/licenses/lgpl-3.0.html)
#
# ----------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------
# MAIN MENU
# ----------------------------------------------------------------------------------------
main_menu(){
  if [ "$1" = "" ]; then
    nextitem="."
  else
    nextitem=$1
  fi
  options=()
  options+=("$txtrankmirrors" "$txtrmdone")
  options+=("$txtkeymap" "$usingkeymap")
  options+=("$txtlanguage" "$applanguage")
  options+=("" "")
  options+=("$txtmakepartitions" "$txtmpdone")
  options+=("$txtselectpartitions" "$txtspdone")
  options+=("$txtformatpartitions" "$txtfpdone")
  options+=("" "")
  options+=("$txtmount" "$txtmountdone")
  options+=("" "")
  options+=("" "")
  options+=("$txtreboot" "")
  sel=$(whiptail --backtitle "$apptitle" --title "$txtmainmenutitle" --menu "" --cancel-button "$txtexit" --default-item "$nextitem" 0 0 0 \
    "${options[@]}" \
    3>&1 1>&2 2>&3)
  if [ "$?" = "0" ]; then
    case $sel in
      "$txtrankmirrors")
      rank_mirrors
      ;;
      "$txtmakepartitions")
      partitioning_menu
        nextitem="$txtselectpartitions"
      ;;
      "$txtselectpartitions")
      select_partitions
        nextitem="$txtformatpartitions"
      ;;
      "$txtformatpartitions")
      format_partitions
        nextitem="$txtmount"
      ;;
      "$txtmount")
        mount_partitions
        nextitem="$txtreboot"
      ;;
      "$txtkeymap")
        set_keymap
      ;;
      "$txtlanguage")
      choose_language
      ;;
      "$txtreboot")
        rebootpc
      ;;
    esac
    main_menu "$nextitem"
  else
    clear
  fi
}

# ----------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------
# Rank Mirrors
# ----------------------------------------------------------------------------------------
rank_mirrors(){

  clear
  local countriescode=("AU" "AT" "BY" "BE" "BR" "BG" "CA" "CL" "CN" "CO" "CZ" "DK" "EE" "FI" "FR" "DE" "GR" "HK" "HU" "ID" "IN" "IR" "IE" "IL" "IT" "JP" "KZ" "KR" "LV" "LU" "MK" "NL" "NC" "NZ" "NO" "PL" "PT" "RO" "RU" "RS" "SG" "SK" "ZA" "ES" "LK" "SE" "CH" "TW" "TR" "UA" "GB" "US" "UZ" "VN")
  local countriesname=("Australia" "Austria" "Belarus" "Belgium" "Brazil" "Bulgaria" "Canada" "Chile" "China" "Colombia" "Czech Republic" "Denmark" "Estonia" "Finland" "France" "Germany" "Greece" "Hong Kong" "Hungary" "Indonesia" "India" "Iran" "Ireland" "Israel" "Italy" "Japan" "Kazakhstan" "Korea" "Latvia" "Luxembourg" "Macedonia" "Netherlands" "New Caledonia" "New Zealand" "Norway" "Poland" "Portugal" "Romania" "Russia" "Serbia" "Singapore" "Slovakia" "South Africa" "Spain" "Sri Lanka" "Sweden" "Switzerland" "Taiwan" "Turkey" "Ukraine" "United Kingdom" "United States" "Uzbekistan" "Viet Nam")

  options=()
  for item in "${countriesname[@]}"; do
    options+=("$item" "")
  done
  selcountry=$(whiptail --backtitle "$apptitle" --title "$txtrankmirrorstitle" --menu "" 0 0 0 \
    "${options[@]}" \
    3>&1 1>&2 2>&3)
  if [ "$?" = "0" ]; then
    
    for i in "${!countriesname[@]}"; do
      if [[ "${countriesname[$i]}" = "${selcountry}" ]]; then
       indexcountry="${i}";
       echo "$indexcountry"
       break
      fi
    done

    countrycode=$(countriescode[${indexcountry}])
    echo "$countrycode"
  fi

  yes | pacman -Sy pacman-contrib
  cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.backup

  url="https://www.archlinux.org/mirrorlist/?country=${countrycode}&use_mirror_status=on"
  tmpfile=$(mktemp --suffix=-mirrorlist)

  echo "$url"
  # Get latest mirror list and save to tmpfile
  curl -so ${tmpfile} ${url}
  sed -i 's/^#Server/Server/g' ${tmpfile}

  # Backup and replace current mirrorlist file (if new file is non-zero)
  if [[ -s ${tmpfile} ]]; then
   { echo "Backing up the original mirrorlist..."
     mv -i /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.backup; } &&
   { echo "Rotating the new list into place..."
     mv -i ${tmpfile} /etc/pacman.d/mirrorlist; }
  else
    echo " Unable to update, could not download list."
  fi
  
  echo "Ranking MirrorList"
  cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.tmp
  rankmirrors /etc/pacman.d/mirrorlist.tmp > /etc/pacman.d/mirrorlist
  rm /etc/pacman.d/mirrorlist.tmp
  chmod +r /etc/pacman.d/mirrorlist
  pressanykey
}

# ----------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------
# Disk Partitioning
# ----------------------------------------------------------------------------------------
partitioning_menu(){
  if [ "$1" = "" ]; then
    nextitem="."
  else
    nextitem=$1
  fi
  options=()
  options+=("$txtautoparts (gpt)" "")
  options+=("$txtautoparts (dos)" "")
  options+=("$txtautoparts (gpt,noswap)" "")
  options+=("$txtautoparts (dos,noswap)" "")
  if [ "$efi" == "1" ]; then
    options+=("$txtautoparts (gpt,efi)" "")
    options+=("$txtautoparts (gpt,efi,noswap)" "")
    options+=("$txtautoparts (gpt,bios+efi,noswap)" "")
  fi
  options+=("$txteditparts (fdisk)" "")
  options+=("$txteditparts (cfdisk)" "")
  options+=("$txteditparts (cgdisk)" "")
  sel=$(whiptail --backtitle "$apptitle" --title "$txtpartitionmenu" --menu "" --cancel-button "$txtback" --default-item "$nextitem" 0 0 0 \
    "${options[@]}" \
    3>&1 1>&2 2>&3)
  if [ "$?" = "0" ]; then
    case $sel in
      "$txtautoparts (dos)")
        partition_dos
        nextitem="$txtautoparts (dos)"
      ;;
      "$txtautoparts (gpt)")
        partition_gpt
        nextitem="$txtautoparts (gpt)"
      ;;
      "$txtautoparts (dos,noswap)")
        partition_dosnoswap
        nextitem="$txtautoparts (dos,noswap)"
      ;;
      "$txtautoparts (gpt,noswap)")
        partition_gptnoswap
        nextitem="$txtautoparts (gpt.noswap)"
      ;;
    # ---------------------------------------------
      "$txtautoparts (gpt,efi)")
        partition_efi
        nextitem="$txtautoparts (gpt,efi)"
      ;;
      "$txtautoparts (gpt,efi,noswap)")
        partition_efinoswap
        nextitem="$txtautoparts (gpt,bios+efi,noswap)"
      ;;
      "$txtautoparts (gpt,bios+efi,noswap)")
        partition_efiusb
        nextitem="$txtautoparts (gpt,bios+efi,noswap)"
      ;;
    # ---------------------------------------------
      "$txteditparts (fdisk)")
        partition_fdisk
        nextitem="$txteditparts (fdisk)"
      ;;
      "$txteditparts (cfdisk)")
        partition_cfdisk
        nextitem="$txteditparts (cfdisk)"
      ;;
      "$txteditparts (cgdisk)")
       partition_cgdisk
        nextitem="$txteditparts (cgdisk)"
      ;;
    esac
    diskpartmenu "$nextitem"
  fi
  if [ ! $rootdev = ""] && [! $bootdev = ""]; then
      $txtmpdone="DONE"
      $txtspdone="DONE"
    else
      $txtfpdone=""
      $txtmpdone=""
      $txtspdone=""
    fi
}

partition_dos(){
  items=$(lsblk -d -p -n -l -o NAME -e 7,11)
  options=()
  for item in $items; do
    options+=("$item" "")
  done
  device=$(whiptail --backtitle "$apptitle" --title "$txtautoparts (dos)" --menu "" 0 0 0 \
    "${options[@]}" \
    3>&1 1>&2 2>&3)
  if [ "$?" = "0" ]; then
    if (whiptail --backtitle "$apptitle" --title "$txtautoparts (dos)" --yesno "${txtautopartsconfirm//%1/$device}" --defaultno 0 0) then
      clear
      echo "$txtautopartclear"
      parted $device mklabel msdos
      sleep 1
      echo "${txtautopartcreate//%1/boot}"
      echo -e "n\np\n\n\n+512M\na\nw" | fdisk $device
      sleep 1
      echo "${txtautopartcreate//%1/swap}"
      swapsize=$(cat /proc/meminfo | grep MemTotal | awk '{ print $2 }')
      swapsize=$(($swapsize/1000))"M"
      echo -e "n\np\n\n\n+$swapsize\nt\n\n82\nw" | fdisk $device
      sleep 1
      echo "${txtautopartcreate//%1/root}"
      echo -e "n\np\n\n\n\nw" | fdisk $device
      sleep 1
      echo ""
      pressanykey
      if [ "${device::8}" == "/dev/nvm" ]; then
        bootdev=$device"p1"
        swapdev=$device"p2"
        rootdev=$device"p3"
      else
        bootdev=$device"1"
        swapdev=$device"2"
        rootdev=$device"3"
      fi
    fi
  fi
}

partition_dosnoswap(){
  items=$(lsblk -d -p -n -l -o NAME -e 7,11)
  options=()
  for item in $items; do
    options+=("$item" "")
  done
  device=$(whiptail --backtitle "$apptitle" --title "$txtautoparts (dos,noswap)" --menu "" 0 0 0 \
    "${options[@]}" \
    3>&1 1>&2 2>&3)
  if [ "$?" = "0" ]; then
    if (whiptail --backtitle "$apptitle" --title "$txtautoparts (dos,noswap)" --yesno "${txtautopartsconfirm//%1/$device}" --defaultno 0 0) then
      clear
      echo "$txtautopartclear"
      parted $device mklabel msdos
      sleep 1
      echo "${txtautopartcreate//%1/boot}"
      echo -e "n\np\n\n\n+512M\na\nw" | fdisk $device
      sleep 1
      echo "No Swap Partition"
      sleep 1
      echo "${txtautopartcreate//%1/root}"
      echo -e "n\np\n\n\n\nw" | fdisk $device
      sleep 1
      echo ""
      pressanykey
      if [ "${device::8}" == "/dev/nvm" ]; then
        bootdev=$device"p1"
        swapdev=
        rootdev=$device"p4"
      else
        bootdev=$device"1"
        swapdev=
        rootdev=$device"4"
      fi
    fi
  fi
}

partition_gpt(){
  items=$(lsblk -d -p -n -l -o NAME -e 7,11)
  options=()
  for item in $items; do
    options+=("$item" "")
  done
  device=$(whiptail --backtitle "$apptitle" --title "$txtautoparts (gpt)" --menu "" 0 0 0 \
    "${options[@]}" \
    3>&1 1>&2 2>&3)
  if [ "$?" = "0" ]; then
    if (whiptail --backtitle "$apptitle" --title "$txtautoparts (gpt)" --yesno "${txtautopartsconfirm//%1/$device}" --defaultno 0 0) then
      clear
      echo "$txtautopartclear"
      parted $device mklabel gpt
      echo "${txtautopartcreate//%1/BIOS boot}"
      sgdisk $device -n=1:0:+31M -t=1:ef02
      echo "${txtautopartcreate//%1/boot}"
      sgdisk $device -n=2:0:+512M
      echo "${txtautopartcreate//%1/swap}"
      swapsize=$(cat /proc/meminfo | grep MemTotal | awk '{ print $2 }')
      swapsize=$(($swapsize/1000))"M"
      sgdisk $device -n=3:0:+$swapsize -t=3:8200
      echo "${txtautopartcreate//%1/root}"
      sgdisk $device -n=4:0:0
      echo ""
      pressanykey
      if [ "${device::8}" == "/dev/nvm" ]; then
        bootdev=$device"p2"
        swapdev=$device"p3"
        rootdev=$device"p4"
      else
        bootdev=$device"2"
        swapdev=$device"3"
        rootdev=$device"4"
      fi
    fi
  fi
}

partition_gptnoswap(){
  items=$(lsblk -d -p -n -l -o NAME -e 7,11)
  options=()
  for item in $items; do
    options+=("$item" "")
  done
  device=$(whiptail --backtitle "$apptitle" --title "$txtautoparts (gpt,noswap)" --menu "" 0 0 0 \
    "${options[@]}" \
    3>&1 1>&2 2>&3)
  if [ "$?" = "0" ]; then
    if (whiptail --backtitle "$apptitle" --title "$txtautoparts (gpt,noswap)" --yesno "${txtautopartsconfirm//%1/$device}" --defaultno 0 0) then
      clear
      echo "$txtautopartclear"
      parted $device mklabel gpt
      echo "${txtautopartcreate//%1/BIOS boot}"
      sgdisk $device -n=1:0:+31M -t=1:ef02
      echo "${txtautopartcreate//%1/boot}"
      sgdisk $device -n=2:0:+512M
      echo "No Swap Partition"
      echo "${txtautopartcreate//%1/root}"
      sgdisk $device -n=4:0:0
      echo ""
      pressanykey
      if [ "${device::8}" == "/dev/nvm" ]; then
        bootdev=$device"p2"
        swapdev=
        rootdev=$device"p4"
      else
        bootdev=$device"2"
        swapdev=
        rootdev=$device"4"
      fi
    fi
  fi
}

partition_efi(){
  items=$(lsblk -d -p -n -l -o NAME -e 7,11)
  options=()
  for item in $items; do
    options+=("$item" "")
  done
  device=$(whiptail --backtitle "$apptitle" --title "$txtautoparts (gpt,efi)" --menu "" 0 0 0 \
    "${options[@]}" \
    3>&1 1>&2 2>&3)
  if [ "$?" = "0" ]; then
    if (whiptail --backtitle "$apptitle" --title "$txtautoparts (gpt,efi)" --yesno "${txtautopartsconfirm//%1/$device}" --defaultno 0 0) then
      clear
      echo "$txtautopartclear"
      parted $device mklabel gpt
      echo "${txtautopartcreate//%1/EFI boot}"
      sgdisk $device -n=1:0:+1024M -t=1:ef00
      echo "${txtautopartcreate//%1/swap}"
      swapsize=$(cat /proc/meminfo | grep MemTotal | awk '{ print $2 }')
      swapsize=$(($swapsize/1000))"M"
      sgdisk $device -n=3:0:+$swapsize -t=3:8200
      echo "${txtautopartcreate//%1/root}"
      sgdisk $device -n=4:0:0
      echo ""
      pressanykey
      if [ "${device::8}" == "/dev/nvm" ]; then
        bootdev=$device"p1"
        swapdev=$device"p3"
        rootdev=$device"p4"
      else
        bootdev=$device"1"
        swapdev=$device"3"
        rootdev=$device"4"
      fi
    fi
  fi
}

partition_efinoswap(){
  items=$(lsblk -d -p -n -l -o NAME -e 7,11)
  options=()
  for item in $items; do
    options+=("$item" "")
  done
  device=$(whiptail --backtitle "$apptitle" --title "$txtautoparts (gpt,efi,noswap)" --menu "" 0 0 0 \
    "${options[@]}" \
    3>&1 1>&2 2>&3)
  if [ "$?" = "0" ]; then
    if (whiptail --backtitle "$apptitle" --title "$txtautoparts (gpt,efi,noswap)" --yesno "${txtautopartsconfirm//%1/$device}" --defaultno 0 0) then
      clear
      echo "$txtautopartclear"
      parted $device mklabel gpt
      echo "${txtautopartcreate//%1/EFI boot}"
      sgdisk $device -n=1:0:+1024M -t=1:ef00
      echo "No Swap Partition"
      echo "${txtautopartcreate//%1/root}"
      sgdisk $device -n=4:0:0
      echo ""
      pressanykey
      if [ "${device::8}" == "/dev/nvm" ]; then
        bootdev=$device"p1"
        swapdev=
        rootdev=$device"p4"
      else
        bootdev=$device"1"
        swapdev=
        rootdev=$device"4"
      fi
    fi
  fi
}

partition_efiusb(){
  items=$(lsblk -d -p -n -l -o NAME -e 7,11)
  options=()
  for item in $items; do
    options+=("$item" "")
  done
  device=$(whiptail --backtitle "$apptitle" --title "$txtautoparts (gpt,efi)" --menu "" 0 0 0 \
    "${options[@]}" \
    3>&1 1>&2 2>&3)
  if [ "$?" = "0" ]; then
    if (whiptail --backtitle "$apptitle" --title "$txtautoparts (gpt,efi)" --yesno "${txtautopartsconfirm//%1/$device}" --defaultno 0 0) then
      clear
      echo "$txtautopartclear"
      parted $device mklabel gpt
      echo "${txtautopartcreate//%1/EFI boot}"
      sgdisk $device -n=1:0:+1024M -t=1:ef00
      echo "${txtautopartcreate//%1/BIOS boot}"
      sgdisk $device -n=3:0:+31M -t=3:ef02
      echo "${txtautopartcreate//%1/root}"
      sgdisk $device -n=4:0:0
      echo "$txthybridpartcreate"
      echo -e "r\nh\n3\nN\n\nY\nN\nw\nY\n" | gdisk $device
      echo ""
      pressanykey
      if [ "${device::8}" == "/dev/nvm" ]; then
        bootdev=$device"p1"
        swapdev=
        rootdev=$device"p4"
      else
        bootdev=$device"1"
        swapdev=
        rootdev=$device"4"
      fi
    fi
  fi
}

partition_fdisk(){
  items=$(lsblk -d -p -n -l -o NAME -e 7,11)
  options=()
  for item in $items; do
    options+=("$item" "")
  done
  device=$(whiptail --backtitle "$apptitle" --title "$txteditparts (fdisk)" --menu "" 0 0 0 \
    "${options[@]}" \
    3>&1 1>&2 2>&3)
  if [ "$?" = "0" ]; then
    clear
    fdisk $device
  fi
}

partition_cfdisk(){
  items=$(lsblk -d -p -n -l -o NAME -e 7,11)
  options=()
  for item in $items; do
    options+=("$item" "")
  done
  device=$(whiptail --backtitle "$apptitle" --title "$txteditparts (cfdisk)" --menu "" 0 0 0 \
    "${options[@]}" \
    3>&1 1>&2 2>&3)
  if [ "$?" = "0" ]; then
    clear
    cfdisk $device
  fi
}

partition_cgdisk(){
  items=$(lsblk -d -p -n -l -o NAME -e 7,11)
  options=()
  for item in $items; do
    options+=("$item" "")
  done
  device=$(whiptail --backtitle "$apptitle" --title "$txteditparts (cfdisk)" --menu "" 0 0 0 \
    "${options[@]}" \
    3>&1 1>&2 2>&3)
  if [ "$?" = "0" ]; then
    clear
    cgdisk $device
  fi
}

# ----------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------
# Select Partitions
# ----------------------------------------------------------------------------------------
select_partitions(){
  items=$(lsblk -p -n -l -o NAME -e 7,11)
  options=()
  for item in $items; do
    options+=("$item" "")
  done

  bootdev=$(whiptail --backtitle "$apptitle" --title "$txtselectpartsmenu" --menu "${txtselectdevice//%1/boot}" --default-item "$bootdev" 0 0 0 \
    "none" "-" \
    "${options[@]}" \
    3>&1 1>&2 2>&3)
  if [ ! "$?" = "0" ]; then
    return 1
  else
    if [ "$bootdev" = "none" ]; then
      bootdev=
    fi
  fi

  swapdev=$(whiptail --backtitle "$apptitle" --title "$txtselectpartsmenu" --menu "${txtselectdevice//%1/swap}" --default-item "$swapdev" 0 0 0 \
    "none" "-" \
    "${options[@]}" \
    3>&1 1>&2 2>&3)
  if [ ! "$?" = "0" ]; then
    return 1
  else
    if [ "$swapdev" = "none" ]; then
      swapdev=
    fi
  fi

  rootdev=$(whiptail --backtitle "$apptitle" --title "$txtselectpartsmenu" --menu "${txtselectdevice//%1/root}" --default-item "$rootdev" 0 0 0 \
    "${options[@]}" \
    3>&1 1>&2 2>&3)
  if [ ! "$?" = "0" ]; then
    return 1
  fi
  realrootdev=$rootdev

  homedev=$(whiptail --backtitle "$apptitle" --title "$txtselectpartsmenu" --menu "${txtselectdevice//%1/home}" 0 0 0 \
    "none" "-" \
    "${options[@]}" \
    3>&1 1>&2 2>&3)
  if [ ! "$?" = "0" ]; then
    return 1
  else
    if [ "$homedev" = "none" ]; then
      homedev=
    fi
  fi

  msg="$txtselecteddevices\n\n"
  msg=$msg"boot : "$bootdev"\n"
  msg=$msg"swap : "$swapdev"\n"
  msg=$msg"root : "$rootdev"\n"
  msg=$msg"home : "$homedev"\n\n"
  if (whiptail --backtitle "$apptitle" --title "$txtselectpartsmenu" --yesno "$msg" 0 0) then
    isnvme=0
    if [ "${bootdev::8}" == "/dev/nvm" ]; then
      isnvme=1
    fi
    if [ "${rootdev::8}" == "/dev/nvm" ]; then
      isnvme=1
    fi
  fi

  if [ ! $rootdev = ""] && [! $bootdev = ""]; then
      $txtmpdone="DONE"
      $txtspdone="DONE"
    else
      $txtfpdone=""
      $txtmpdone=""
      $txtspdone=""
    fi
}


# ----------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------
# Format Partitions
# ----------------------------------------------------------------------------------------
format_partitions(){
  if (whiptail --backtitle "$apptitle" --title "$txtformatpartitions" --yesno "$txtformatconfirm" --defaultno 0 0) then
    if [ ! "$bootdev" = "" ]; then
      format_boot boot $bootdev
    fi
    format_root root $rootdev
    if [ ! "$homedev" = "" ]; then
      format_home home $homedev
    fi
    if [ ! "$swapdev" = "" ]; then
      format_swap swap $swapdev
    fi   
  fi
}

format_boot(){
  options=()
  if [ "$efi" == "1" ]; then
    options+=("fat32" "(EFI)")
  fi
  options+=("ext2" "")
  options+=("ext3" "")
  options+=("ext4" "")
  sel=$(whiptail --backtitle "$apptitle" --title "$txtformatpartition" --menu "${txtselectformat//%1/$1 ($2)}" 0 0 0 \
    "${options[@]}" \
    3>&1 1>&2 2>&3)
  if [ ! "$?" = "0" ]; then
    return 1
  fi
  clear
  echo "${txtformating//%1/$2} $sel"
  echo "----------------------------------------------"
  case $sel in
    ext2)
      echo "mkfs.ext2 $2"
      mkfs.ext2 $2
    ;;
    ext3)
      echo "mkfs.ext3 $2"
      mkfs.ext3 $2
    ;;
    ext4)
      echo "mkfs.ext4 $2"
      mkfs.ext4 $2
    ;;
    fat32)
      echo "mkfs.fat $2"
      mkfs.fat $2
    ;;
  esac
  echo ""
  pressanykey
}

format_root(){
  options=()
  options+=("btrfs" "")
  options+=("reiserfs" "")
  options+=("ext4" "")
  options+=("ext3" "")
  options+=("ext2" "")
  options+=("xfs" "")
  options+=("jfs" "")
  if [ ! "$3" = "noluks" ]; then
    options+=("luks" "encrypted")
  fi
  sel=$(whiptail --backtitle "$apptitle" --title "$txtformatpartition" --menu "${txtselectpartformat//%1/$1 ($2)}" 0 0 0 \
    "${options[@]}" \
    3>&1 1>&2 2>&3)
  if [ ! "$?" = "0" ]; then
    return 1
  fi
  clear
  echo "${txtformating//%1/$2} $sel"
  echo "----------------------------------------------"
  case $sel in
    btrfs)
      echo "mkfs.btrfs -f $2"
      mkfs.btrfs -f $2
      if [ "$1" = "root" ]; then
        echo "mount $2 /mnt"
        echo "btrfs subvolume create /mnt/root"
        echo "btrfs subvolume set-default /mnt/root"
        echo "umount /mnt"
        mount $2 /mnt
        btrfs subvolume create /mnt/root
        btrfs subvolume set-default /mnt/root
        umount /mnt
      fi
    ;;
    reiserfs)
      echo "mkfs.reiserfs -f $2"
      mkfs.reiserfs -f $2
    ;;
    ext4)
      echo "mkfs.ext4 $2"
      mkfs.ext4 $2
    ;;
    ext3)
      echo "mkfs.ext3 $2"
      mkfs.ext3 $2
    ;;
    ext2)
      echo "mkfs.ext2 $2"
      mkfs.ext2 $2
    ;;
    xfs)
      echo "mkfs.xfs -f $2"
      mkfs.xfs -f $2
    ;;
    jfs)
      echo "mkfs.xfs -f $2"
      mkfs.jfs -f $2
    ;;
    luks)
      echo "$txtcreateluksdevice"
      echo "cryptsetup luksFormat $2"
      cryptsetup luksFormat $2
      if [ ! "$?" = "0" ]; then
        pressanykey
        return 1
      fi
      pressanykey
      echo ""
      echo "$txtopenluksdevice"
      echo "cryptsetup luksOpen $2 $1"
      cryptsetup luksOpen $2 $1
      if [ ! "$?" = "0" ]; then
        pressanykey
        return 1
      fi
      pressanykey
      options=()
      options+=("normal" "")
      options+=("fast" "")
      sel=$(whiptail --backtitle "$apptitle" --title "$txtformatpartition" --menu "Wipe device ?" --cancel-button="$txtignore" 0 0 0 \
        "${options[@]}" \
        3>&1 1>&2 2>&3)
      if [ "$?" = "0" ]; then
        case $sel in
          normal)
            echo "dd if=/dev/zero of=/dev/mapper/$1"
            dd if=/dev/zero of=/dev/mapper/$1 & PID=$! &>/dev/null
          ;;
          fast)
            echo "dd if=/dev/zero of=/dev/mapper/$1 bs=60M"
            dd if=/dev/zero of=/dev/mapper/$1 bs=60M & PID=$! &>/dev/null
          ;;
        esac
        clear
        sleep 1
        while kill -USR1 $PID &>/dev/null
        do
          sleep 1
        done
      fi
      echo ""
      pressanykey
      echo ""
      format_root $1 /dev/mapper/$1 noluks
      if [ "$1" = "root" ]; then
        realrootdev=$rootdev
        rootdev=/dev/mapper/$1
        luksroot=1
        luksrootuuid=$(cryptsetup luksUUID $2)
      else
        case $1 in
          home) homedev=/dev/mapper/$1 ;;
        esac
        luksdrive=1
        crypttab="\n$1    UUID=$(cryptsetup luksUUID $2)    none"
      fi
      echo ""
      echo "$txtluksdevicecreated"
    ;;
  esac
  echo ""
  pressanykey
}

format_swap(){
  options=()
  options+=("swap" "")
  sel=$(whiptail --backtitle "$apptitle" --title "$txtformatpartition" --menu "${txtselectformat//%1/$1 ($2)}" 0 0 0 \
    "${options[@]}" \
    3>&1 1>&2 2>&3)
  if [ ! "$?" = "0" ]; then
    return 1
  fi
  clear
  echo "${txtformating//%1/$swapdev} swap"
  echo "----------------------------------------------------"
  case $sel in
    swap)
      echo "mkswap $swapdev"
      mkswap $swapdev
      echo ""
      pressanykey
    ;;
  esac
  clear
}

# ----------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------
# Mount/Unmount Partitions
# ----------------------------------------------------------------------------------------
mount_partitions(){
  clear
  if [ "$rootdev" = "" ] && [ "$bootdev" = "" ]; then
    select_partitions
  fi
  clear
  echo "mount $rootdev /mnt"
  mount $rootdev /mnt
  echo "mkdir /mnt/{boot,home}"
  mkdir /mnt/{boot,home} 2>/dev/null
  if [ ! "$bootdev" = "" ]; then
    echo "mount $bootdev /mnt/boot"
    mount $bootdev /mnt/boot
  fi
  if [ ! "$swapdev" = "" ]; then
    echo "swapon $swapdev"
    swapon $swapdev
  fi
  if [ ! "$homedev" = "" ]; then
    echo "mount $homedev /mnt/home"
    mount $homedev /mnt/home
  fi
  pressanykey
  install_menu
}

unmount_partitions(){
  clear
  echo "umount -R /mnt"
  umount -R /mnt
  if [ ! "$swapdev" = "" ]; then
    echo "swapoff $swapdev"
    swapoff $swapdev
  fi
  pressanykey
}

# ----------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------
# INSTALL MENU
# ----------------------------------------------------------------------------------------
install_menu(){
  if [ "$1" = "" ]; then
    nextitem="$txtinstallarchlinux"
  else
    nextitem=$1
  fi
  options=()
  options+=("$txtinstallarchlinux" "(pacstrap)")
  options+=("$txtbootloader" "")
  options+=("" "")
  options+=("$txtconfigarchlinux" "")
  sel=$(whiptail --backtitle "$apptitle" --title "$txtinstallmenu" --menu "" --cancel-button "$txtunmount" --default-item "$nextitem" 0 0 0 \
    "${options[@]}" \
    3>&1 1>&2 2>&3)
  if [ "$?" = "0" ]; then
    case $sel in
      "$txtinstallarchlinux")
        install_base
        nextitem="$txtbootloader"
      ;;
      "$txtbootloader")
        install_bootloader_menu
        nextitem="$txtconfigarchlinux"
      ;;
      "$txtconfigarchlinux")
        conf_menu
        nextitem="$txtconfigarchlinux"
      ;;
    esac
    install_menu "$nextitem"
  else
    unmount_partitions
  fi
}

# ----------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------
# INSTALL ARCH LINUX
# ----------------------------------------------------------------------------------------
install_base(){
  if (whiptail --backtitle "$apptitle" --title "$txtbasedev" --yesno "$txtinstalldev" --defaultno 0 0) then
    clear
    echo "pacstrap /mnt base base-dev"        
    pacstrap /mnt base
  else
    clear
    echo "pacstrap /mnt base"        
    pacstrap /mnt base
  fi
  pressanykey
}

# ----------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------
# INSTALL BOOTLOADER
# ----------------------------------------------------------------------------------------
install_bootloader_menu(){
  options=()
  options+=("grub" "")
  sel=$(whiptail --backtitle "$apptitle" --title "$txtbootloadermenu" --menu "" --cancel-button "$txtback" 0 0 0 \
    "${options[@]}" \
    3>&1 1>&2 2>&3)
  if [ "$?" = "0" ]; then
    case $sel in
      "grub") grub_menu;;
    esac
  fi
}

# ----------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------
# GRUB MENU/INSTALL
# ----------------------------------------------------------------------------------------
grub_menu(){
  if [ "$1" = "" ]; then
    nextblitem="."
  else
    nextblitem=$1
  fi
  options=()
  options+=("${txtinstall//%1/grub}" "pacstrap grub (efibootmgr), grub-mkconfig")
  options+=("${txtedit//%1/grub}" "($txtoptional)")
  options+=("${txtinstall//%1/bootloader}" "grub-install")
  sel=$(whiptail --backtitle "$apptitle" --title "$txtbootloadergrubmenu" --menu "" --cancel-button "$txtback" --default-item "$nextblitem" 0 0 0 \
    "${options[@]}" \
    3>&1 1>&2 2>&3)
  if [ "$?" = "0" ]; then
    case $sel in
      "${txtinstall//%1/grub}")
        grub_install
        nextblitem="${txtinstall//%1/bootloader}"
      ;;
      "${txtedit//%1/grub}")
        choose_editor
        $EDITOR /mnt/etc/default/grub
        if (whiptail --backtitle "$apptitle" --title "${txtedit//%1/grub}" --yesno "$txtrungrubmakeconfig" 0 0) then
          clear
          arch_chroot grub_installchroot
          pressanykey
        fi
        nextblitem="${txtinstall//%1/bootloader}"
      ;;
      "${txtinstall//%1/bootloader}")
        grub_installbootloader
        nextblitem="${txtinstall//%1/bootloader}"
      ;;
    esac
    grub_menu "$nextblitem"
  fi
}

grub_install(){
  clear
  echo "pacstrap /mnt grub"
  pacstrap /mnt grub
  pressanykey
  
  if [ "$efi" == "1" ]; then
    if (whiptail --backtitle "$apptitle" --title "${txtinstall//%1/efibootmgr}" --yesno "$txtefibootmgr" --defaultno 0 0) then
      clear
      echo "pacstrap /mnt efibootmgr"
      pacstrap /mnt efibootmgr
      pressanykey
    fi
  fi
  
  if [ "$luksroot" = "1" ]; then
    if (whiptail --backtitle "$apptitle" --title "${txtinstall//%1/grub}" --yesno "$txtgrubluksdetected" 0 0) then
      clear
      echo "sed -i /GRUB_CMDLINE_LINUX=/c\GRUB_CMDLINE_LINUX=\\\"cryptdevice=/dev/disk/by-uuid/$luksrootuuid:root\\\" /mnt/etc/default/grub"
      sed -i /GRUB_CMDLINE_LINUX=/c\GRUB_CMDLINE_LINUX=\"cryptdevice=/dev/disk/by-uuid/$luksrootuuid:root\" /mnt/etc/default/grub
      pressanykey
    fi
  fi
  
  clear
  echo "grub_installchroot"
  arch_chroot grub_installchroot
  pressanykey
}

grub_installchroot(){
  echo "mkdir /boot/grub"
  echo "grub-mkconfig -o /boot/grub/grub.cfg"
  mkdir /boot/grub
  grub-mkconfig -o /boot/grub/grub.cfg
  exit
}

grub_installbootloader(){
  items=$(lsblk -d -p -n -l -o NAME -e 7,11)
  options=()
  for item in $items; do
    options+=("$item" "")
  done
  device=$(whiptail --backtitle "$apptitle" --title "${txtinstall//%1/bootloader}" --menu "" 0 0 0 \
    "${options[@]}" \
    3>&1 1>&2 2>&3)
  if [ "$?" = "0" ]; then
    if [ "$efi" == "1" ]; then
      options=()
      options+=("EFI" "")
      options+=("BIOS" "")
      options+=("BIOS+EFI" "")
    else
      options+=("BIOS" "")
      options+=("EFI" "")
      options+=("BIOS+EFI" "")
    fi
    sel=$(whiptail --backtitle "$apptitle" --title "${txtinstall//%1/bootloader}" --menu "" --cancel-button "$txtback" 0 0 0 \
      "${options[@]}" \
      3>&1 1>&2 2>&3)
    if [ "$?" = "0" ]; then
      clear
      case $sel in
        "BIOS") arch_chroot grub_installbootloaderchroot $device;;
        "EFI") arch_chroot grub_installbootloaderefichroot $device;;
        "BIOS+EFI") grub_installbootloaderefiusbchroot $device;;
      esac
      pressanykey
    fi
  else
    clear
    arch_chroot grub_installbootloaderchroot $device
    pressanykey
  fi
}

grub_installbootloaderchroot(){
  if [ ! "$1" = "none" ]; then
    echo "grub-install --target=i386-pc --recheck $1"
    grub-install --target=i386-pc --recheck $1
  fi
  exit
}

grub_installbootloaderefichroot(){
  if [ ! "$1" = "none" ]; then
    echo "grub-install --target=x86_64-efi --efi-directory=/boot --recheck $1"
    grub-install --target=x86_64-efi --efi-directory=/boot --recheck $1
    isvbox=$(lspci | grep "VirtualBox G")
    if [ "$isvbox" ]; then
      echo "VirtualBox detected, creating startup.nsh..."
      echo "\EFI\arch\grubx64.efi" > /boot/startup.nsh
    fi
  fi
  exit
}

grub_installbootloaderefiusbchroot(){
  if [ ! "$1" = "none" ]; then
    echo "grub-install --target=i386-pc --recheck $1"
    grub-install --target=i386-pc --recheck $1
    echo "grub-install --target=x86_64-efi --efi-directory=/boot --removable --recheck $1"
    grub-install --target=x86_64-efi --efi-directory=/boot --removable --recheck $1
    isvbox=$(lspci | grep "VirtualBox G")
    if [ "$isvbox" ]; then
      echo "VirtualBox detected, creating startup.nsh..."
      echo "\EFI\arch\grubx64.efi" > /boot/startup.nsh
    fi
  fi
  exit
}

# ----------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------
# CONF MENU
# ----------------------------------------------------------------------------------------
conf_menu(){
  if [ "$1" = "" ]; then
    nextitem="."
  else
    nextitem=$1
  fi
  options=()
  options+=("$txtsethostname" "/etc/hostname")
  options+=("$txtsetkeymap" "/etc/vconsole.conf")
  options+=("$txtsetlocale" "/etc/locale.conf, /etc/locale.gen")
  options+=("$txtsettime" "/etc/localtime")
  options+=("$txtsetrootpassword" "")
  options+=("$txtcreatenewuser" "sudo")
  options+=("${txtgenerate//%1/fstab}" "")
  if [ "$luksdrive" = "1" ]; then
    options+=("${txtgenerate//%1/crypttab}" "")
  fi
  if [ "$luksroot" = "1" ]; then
    options+=("${txtgenerate//%1/mkinitcpio.conf-luks}" "(encrypt hooks)")
  fi
  if [ "$isnvme" = "1" ]; then
    options+=("${txtgenerate//%1/mkinitcpio.conf-nvme}" "(nvme module)")
  fi
  options+=("${txtenable//%1/dhcpcd}" "systemctl enable dhcpd")
  options+=("" "")
  options+=("${txtedit//%1/fstab}" "($txtoptional)")
  options+=("${txtedit//%1/crypttab}" "($txtoptional)")
  options+=("${txtedit//%1/mkinitcpio.conf}" "($txtoptional)")
  options+=("${txtedit//%1/mirrorlist}" "($txtoptional)")
  sel=$(whiptail --backtitle "$apptitle" --title "$txtconfmenu" --menu "" --cancel-button "$txtback" --default-item "$nextitem" 0 0 0 \
    "${options[@]}" \
    3>&1 1>&2 2>&3)
  if [ "$?" = "0" ]; then
    case $sel in
      "$txtsethostname")
        set_hostname
        nextitem="$txtsethostname"
      ;;
      "$txtsetkeymap")
        change_keymap
        nextitem="$txtsetkeymap"
      ;;
      "$txtsetlocale")
        set_locale
        nextitem="$txtsetlocale"
      ;;
      "$txtsettime")
        set_time
        nextitem="$txtsettime"
      ;;
      "$txtsetrootpassword")
        set_rootpassword
        nextitem="$txtsetrootpassword"
      ;;
      "$txtcreatenewuser")
        create_user
        nextitem="$txtcreatenewuser"
      ;;
      "${txtgenerate//%1/fstab}")
        genfstab_menu
        if [ "$luksdrive" = "1" ]; then
          nextitem="${txtgenerate//%1/crypttab}"
        else
          if [ "$luksroot" = "1" ]; then
            nextitem="${txtgenerate//%1/mkinitcpio.conf-luks}"
          else
            if [ "$isnvme" = "1" ]; then
              nextitem="${txtgenerate//%1/mkinitcpio.conf-nvme}"
            else
              nextitem="${txtenable//%1/dhcpcd}"
            fi
          fi
        fi
      ;;
      "${txtgenerate//%1/crypttab}")
        gen_crypttab
        if [ "$luksroot" = "1" ]; then
          nextitem="${txtgenerate//%1/mkinitcpio.conf-luks}"
        else
          if [ "$isnvme" = "1" ]; then
            nextitem="${txtgenerate//%1/mkinitcpio.conf-nvme}"
          else
            nextitem="${txtenable//%1/dhcpcd}"
          fi
        fi
      ;;
      "${txtgenerate//%1/mkinitcpio.conf-luks}")
        gen_mkinitcpioluks
        if [ "$isnvme" = "1" ]; then
          nextitem="${txtgenerate//%1/mkinitcpio.conf-nvme}"
        else
          nextitem="${txtenable//%1/dhcpcd}"
        fi
      ;;
      "${txtgenerate//%1/mkinitcpio.conf-nvme}")
        gen_mkinitcpionvme
        nextitem="${txtenable//%1/dhcpcd}"
      ;;
      "${txtedit//%1/fstab}")
        $EDITOR /mnt/etc/fstab
        nextitem="${txtedit//%1/fstab}"
      ;;
      "${txtedit//%1/crypttab}")
        $EDITOR /mnt/etc/crypttab
        nextitem="${txtedit//%1/crypttab}"
      ;;
      "${txtedit//%1/mkinitcpio.conf}")
        edit_mkinitcpio
        nextitem="${txtedit//%1/mkinitcpio.conf}"
      ;;
      "${txtedit//%1/mirrorlist}")
        $EDITOR /mnt/etc/pacman.d/mirrorlist
        nextitem="${txtedit//%1/mirrorlist}"
      ;;
      "${txtenable//%1/dhcpcd}")
        enable_dhcpcd
        nextitem="${txtenable//%1/dhcpcd}"
      ;;
    esac
    conf_menu "$nextitem"
  fi
}

set_hostname(){
  hostname=$(whiptail --backtitle "$apptitle" --title "$txtsethostname" --inputbox "" 0 0 "archlinux" 3>&1 1>&2 2>&3)
  if [ "$?" = "0" ]; then
    clear
    echo "echo \"$hostname\" > /mnt/etc/hostname"
    echo "$hostname" > /mnt/etc/hostname

    echo "echo '127.0.0.1     localhost' > /mnt/etc/hosts"
    echo "127.0.0.1     localhost" > /mnt/etc/hosts

    echo "echo '::1	        localhost' > /mnt/etc/hosts"
    echo "::1	          localhost" > /mnt/etc/hosts

    echo "echo '127.0.1.1     $hostname.localdomain   $hostname' > /mnt/etc/hosts"
    echo "127.0.1.1     $hostname.localdomain   $hostname" > /mnt/etc/hosts
    pressanykey
  fi
}

change_keymap(){
  items=$(find /usr/share/kbd/keymaps/ -type f -printf "%f\n" | sort -V)
  options=()
  defsel=""
  for item in $items; do
    if [ "${item%%.*}" == "$keymap" ]; then
      defsel="${item%%.*}"
    fi
    options+=("${item%%.*}" "")
  done
  keymap=$(whiptail --backtitle "$apptitle" --title "$txtsetkeymap" --menu "" --default-item "$defsel" 0 0 0 \
    "${options[@]}" \
    3>&1 1>&2 2>&3)
  if [ "$?" = "0" ]; then
    clear
    echo "echo \"KEYMAP=$keymap\" > /mnt/etc/vconsole.conf"
    echo "KEYMAP=$keymap" > /mnt/etc/vconsole.conf
    pressanykey
  fi
}

set_font(){
  items=$(find /usr/share/kbd/consolefonts/*.psfu.gz -printf "%f\n")
  
  options=()
  for item in $items; do
    options+=("${item%%.*}" "")
  done
  vcfont=$(whiptail --backtitle "$apptitle" --title "$txtsetfont ($txtoptional)" --menu "" 0 0 0 \
    "${options[@]}" \
    3>&1 1>&2 2>&3)
  if [ "$?" = "0" ]; then
    clear
    echo "echo \"FONT=$vcfont\" >> /mnt/etc/vconsole.conf"
    echo "FONT=$vcfont" >> /mnt/etc/vconsole.conf
    pressanykey
  fi
}

set_locale(){
  items=$(ls /usr/share/i18n/locales)
  options=()
  defsel=""
  for item in $items; do
    if [ "$defsel" == "" ]&&[ "${keymap::2}" == "${item::2}" ]; then
      defsel="$item"
    fi
    options+=("$item" "")
  done
  locale=$(whiptail --backtitle "$apptitle" --title "$txtsetlocale" --menu "" --default-item "$defsel" 0 0 0 \
    "${options[@]}" \
    3>&1 1>&2 2>&3)
  if [ "$?" = "0" ]; then
    clear
    echo "echo \"LANG=$locale.UTF-8\" > /mnt/etc/locale.conf"
    echo "LANG=$locale.UTF-8" > /mnt/etc/locale.conf
    echo "echo \"LC_COLLATE=C\" >> /mnt/etc/locale.conf"
    echo "LC_COLLATE=C" >> /mnt/etc/locale.conf
    echo "sed -i '/"$locale".UTF-8/s/^#//g' /mnt/etc/locale.gen"
    sed -i '/'$locale'.UTF-8/s/^#//g' /mnt/etc/locale.gen
    arch_chroot set_localechroot
    pressanykey
  fi
}

set_localechroot(){
  echo "locale-gen"
  locale-gen
  exit
}

set_time(){
  items=$(ls -l /mnt/usr/share/zoneinfo/ | grep '^d' | gawk -F':[0-9]* ' '/:/{print $2}')
  options=()
  for item in $items; do
    options+=("$item" "")
  done

  timezone=$(whiptail --backtitle "$apptitle" --title "$txtsettime" --menu "" 0 0 0 \
    "${options[@]}" \
    3>&1 1>&2 2>&3)
  if [ ! "$?" = "0" ]; then
    return 1
  fi
  
  
  items=$(ls /mnt/usr/share/zoneinfo/$timezone/)
  options=()
  for item in $items; do
    options+=("$item" "")
  done

  timezone=$timezone/$(whiptail --backtitle "$apptitle" --title "$txtsettime" --menu "" 0 0 0 \
    "${options[@]}" \
    3>&1 1>&2 2>&3)
  if [ ! "$?" = "0" ]; then
    return 1
  fi
  
  clear
  echo "ln -sf /mnt/usr/share/zoneinfo/$timezone /mnt/etc/localtime"
  ln -sf /usr/share/zoneinfo/$timezone /mnt/etc/localtime
  pressanykey
  
  if (whiptail --backtitle "$apptitle" --title "$txtsettime" --yesno "$txtuseutcclock" 0 0) then
    clear
    arch_chroot set_timeutcchroot
  else
    clear
    arch_chroot set_timelocalchroot
  fi
  
  pressanykey
}

set_timeutcchroot(){
  echo "hwclock --systohc --utc"
  hwclock --systohc --utc
  exit
}
set_timelocalchroot(){
  echo "hwclock --systohc --localtime"
  hwclock --systohc --localtime
  exit
}

set_rootpassword(){
  clear
  arch_chroot set_rootpasswordchroot
  pressanykey
}

set_rootpasswordchroot(){
  echo "passwd root"
  passwd root
  exit
}

create_user(){
  clear
  newusername=$(whiptail --backtitle "$apptitle" --title "$txtcreatenewuser" --inputbox "" 0 0 "newhomeuser" 3>&1 1>&2 2>&3)
  
  if [ "$?" = "0" ]; then    
    arch_chroot create_userchroot $newusername
  fi
  pressanykey
}

create_userchroot(){
  clear
  echo "useradd -m -s /bin/bash $1"
  useradd -m -s /bin/bash $1
  echo "usermod -aG wheel,storage,audio,video $1"
  usermod -aG wheel,storage,audio,video $1
  echo "passwd $1"
  passwd $1

  pressanykey

  echo "Setting up SUDO"
  y | pacman -S sudo
  echo "%wheel ALL=(ALL) ALL' >> /etc/sudoers"
  echo '%wheel ALL=(ALL) ALL' >> /etc/sudoers
  echo "'Defaults rootpw' >> /etc/sudoers"
  echo 'Defaults rootpw' >> /etc/sudoers
  #echo 'Defaults targetpw' >> /etc/sudoers
  exit
}

genfstab_menu(){
  options=()
  options+=("UUID" "genfstab -U")
  options+=("LABEL" "genfstab -L")
  options+=("PARTUUID" "genfstab -t PARTUUID")
  options+=("PARTLABEL" "genfstab -t PARTLABEL")
  sel=$(whiptail --backtitle "$apptitle" --title "${txtgenerate//%1/fstab}" --menu "" --cancel-button "$txtback" --default-item "$nextitem" 0 0 0 \
    "${options[@]}" \
    3>&1 1>&2 2>&3)
  if [ "$?" = "0" ]; then
    case $sel in
      "UUID")
        clear
        echo "genfstab -U -p /mnt > /mnt/etc/fstab"
        genfstab -U -p /mnt > /mnt/etc/fstab
      ;;
      "LABEL")
        clear
        echo "genfstab -L -p /mnt > /mnt/etc/fstab"
        genfstab -L -p /mnt > /mnt/etc/fstab
      ;;
      "PARTUUID")
        clear
        echo "genfstab -t PARTUUID -p /mnt > /mnt/etc/fstab"
        genfstab -t PARTUUID -p /mnt > /mnt/etc/fstab
      ;;
      "PARTLABEL")
        clear
        echo "genfstab -t PARTLABEL -p /mnt > /mnt/etc/fstab"
        genfstab -t PARTLABEL -p /mnt > /mnt/etc/fstab
      ;;
    esac
  fi
  pressanykey
}

gen_crypttab(){
  clear
  echo "echo -e \"$crypttab\" >> /mnt/etc/crypttab"
  echo -e "$crypttab" >> /mnt/etc/crypttab
  pressanykey
}

gen_mkinitcpioluks(){
  clear
  echo "sed -i \"s/block filesystems/block encrypt filesystems/g\" /mnt/etc/mkinitcpio.conf"
  sed -i "s/block filesystems/block encrypt filesystems/g" /mnt/etc/mkinitcpio.conf
  arch_chroot gen_mkinitcpiochroot
  pressanykey
}

gen_mkinitcpionvme(){
  clear
  echo "sed -i \"s/MODULES=()/MODULES=(nvme)/g\" /mnt/etc/mkinitcpio.conf"
  sed -i "s/MODULES=()/MODULES=(nvme)/g" /mnt/etc/mkinitcpio.conf
  arch_chroot gen_mkinitcpiochroot
  pressanykey
}

edit_mkinitcpio(){
  $EDITOR /mnt/etc/mkinitcpio.conf
  if (whiptail --backtitle "$apptitle" --title "${txtedit//%1/mkinitcpio.conf}" --yesno "${txtgenerate//%1/mkinitcpio} ?" 0 0) then
    clear
    arch_chroot gen_mkinitcpiochroot
    pressanykey
  fi
}

gen_mkinitcpiochroot(){
  echo "mkinitcpio -p linux"
  mkinitcpio -p linux
  exit
}

enable_dhcpcd(){
  if (whiptail --backtitle "$apptitle" --title "${txtenable//%1/dhcpcd}" --yesno "${txtenable//%1/dhcpcd} ?" 0 0) then
    clear
    arch_chroot enable_dhcpcdchroot
    pressanykey
  fi
}

enable_dhcpcdchroot(){
  echo "systemctl enable dhcpcd"
  systemctl enable dhcpcd
  exit
}

# ----------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------
# UNUSED BOOTLOADERS
# ----------------------------------------------------------------------------------------
archbootloadersyslinuxbmenu(){
  if [ "$1" = "" ]; then
    nextblitem="."
  else
    nextblitem=$1
  fi
  options=()
  options+=("${txtinstall//%1/syslinux}" "pacstrap syslinux (gptfdisk,mtools)")
  options+=("${txtedit//%1/syslinux}" "($txtoptional)")
  options+=("${txtinstall//%1/bootloader}" "syslinux-install_update")
  sel=$(whiptail --backtitle "$apptitle" --title "$txtbootloadersyslinuxmenu" --menu "" --cancel-button "$txtback" --default-item "$nextblitem" 0 0 0 \
    "${options[@]}" \
    3>&1 1>&2 2>&3)
  if [ "$?" = "0" ]; then
    case $sel in
      "${txtinstall//%1/syslinux}")
        archsyslinuxinstall
        nextblitem="${txtinstall//%1/bootloader}"
      ;;
      "${txtedit//%1/syslinux}")
        $EDITOR /mnt/boot/syslinux/syslinux.cfg
        nextblitem="${txtinstall//%1/bootloader}"
      ;;
      "${txtinstall//%1/bootloader}")
        archsyslinuxinstallbootloader
        nextblitem="${txtinstall//%1/bootloader}"
      ;;
    esac
    archbootloadersyslinuxbmenu "$nextblitem"
  fi
}

archsyslinuxinstall(){
  clear
  
  if [ "$efimode" == "1" ]||[ "$efimode" == "2" ]; then
    echo "$txtsyslinuxaddefibootmgr"
    additionalpkg=$additionalpkg"efibootmgr "
  fi
  
  if [ "$isnvme" = "1" ]; then
    if [ "$(parted ${realrootdev::(-2)} print|grep gpt)" != "" ]; then
      echo "$txtsyslinuxaddgptfdisk"
      additionalpkg=$additionalpkg"gptfdisk "
    fi
  else
    if [ "$(parted ${realrootdev::8} print|grep gpt)" != "" ]; then
      echo "$txtsyslinuxaddgptfdisk"
      additionalpkg=$additionalpkg"gptfdisk "
    fi
  fi
  
  if [ "$bootdev" != "" ]; then
    if [ "$(parted $bootdev print|grep fat)" != "" ]; then
      echo "$txtsyslinuxaddmtools"
      additionalpkg=$additionalpkg"mtools "
    fi
  fi

  echo "pacstrap /mnt syslinux $additionalpkg"
  pacstrap /mnt syslinux $additionalpkg
  pressanykey

  clear
  echo "Updating /boot/syslinux/syslinux.cfg"
  if [ "$luksroot" = "1" ]; then
    echo "sed -i \"/APPEND\ root=/c\    APPEND root=/dev/mapper/root cryptdevice=$realrootdev:root rw\" /mnt/boot/syslinux/syslinux.cfg"
    sed -i "/APPEND\ root=/c\    APPEND root=/dev/mapper/root cryptdevice=$realrootdev:root\ rw" /mnt/boot/syslinux/syslinux.cfg
  else
    echo "sed -i \"/APPEND\ root=/c\    APPEND root=$rootdev rw\" /mnt/boot/syslinux/syslinux.cfg"
    sed -i "/APPEND\ root=/c\    APPEND root=$rootdev\ rw" /mnt/boot/syslinux/syslinux.cfg
  fi
  
  pressanykey
}
archsyslinuxinstallbootloader(){
  clear
  if [ "$efimode" == "1" ]||[ "$efimode" == "2" ]; then
    archchroot syslinuxbootloaderefiinstall $bootdev
  else
    archchroot syslinuxbootloaderinstall $bootdev
  fi
  pressanykey
}

archsyslinuxinstallbootloaderchroot(){
  if [ ! "$1" = "none" ]; then
    echo "syslinux-install_update -i -a -m"
    syslinux-install_update -i -a -m
  fi
  exit
}

archsyslinuxinstallbootloaderefichroot(){
  if [ ! "$1" = "none" ]; then
    echo "cp -r /usr/lib/syslinux/efi64/* /boot/syslinux"
    cp -r /usr/lib/syslinux/efi64/* /boot/syslinux
    if [ "${1::8}" == "/dev/nvm" ]; then
      echo "efibootmgr --create --disk ${1::(-2)} --part ${1:(-1)} --loader /syslinux/syslinux.efi --label "Syslinux" --verbose"
      efibootmgr --create --disk ${1::(-2)} --part ${1:(-1)} --loader /syslinux/syslinux.efi --label "Syslinux" --verbose
    else
      echo "efibootmgr --create --disk ${1::8} --part ${1:(-1)} --loader /syslinux/syslinux.efi --label "Syslinux" --verbose"
      efibootmgr --create --disk ${1::8} --part ${1:(-1)} --loader /syslinux/syslinux.efi --label "Syslinux" --verbose
    fi
    isvbox=$(lspci | grep "VirtualBox G")
    if [ "$isvbox" ]; then
      echo "VirtualBox detected, creating startup.nsh..."
      echo "\syslinux\syslinux.efi" > /boot/startup.nsh
    fi
  fi
  exit
}

archbootloadersystemdbmenu(){
  if [ "$1" = "" ]; then
    nextblitem="."
  else
    nextblitem=$1
  fi
  options=()
  options+=("${txtinstall//%1/systemd-boot}" "bootctl install")
  options+=("${txtedit//%1/loader.conf}" "($txtoptional)")
  options+=("${txtedit//%1/entries}" "($txtoptional)")
  sel=$(whiptail --backtitle "$apptitle" --title "$txtbootloadersystemdmenu" --menu "" --cancel-button "$txtback" --default-item "$nextblitem" 0 0 0 \
    "${options[@]}" \
    3>&1 1>&2 2>&3)
  if [ "$?" = "0" ]; then
    case $sel in
      "${txtinstall//%1/systemd-boot}")
        archsystemdinstall
        nextblitem="${txtinstall//%1/loader.conf}"
      ;;
      "${txtedit//%1/loader.conf}")
        $EDITOR /mnt/boot/loader/loader.conf
        nextblitem="${txtedit//%1/entries}"
      ;;
      "${txtedit//%1/entries}")
        $EDITOR /mnt/boot/loader/entries/*
        nextblitem="${txtedit//%1/entries}"
      ;;
    esac
    archbootloadersystemdbmenu "$nextblitem"
  fi
}

archsystemdinstall(){
  clear
  archchroot systemdbootloaderinstall $realrootdev
  
  partuuid=$(blkid -s PARTUUID -o value $realrootdev)
  parttype=$(blkid -s TYPE -o value $rootdev)
  
  echo "cp /mnt/usr/share/systemd/bootctl/arch.conf /mnt/boot/loader/entries"
  echo "echo \"timeout 2\" >> /mnt/boot/loader/loader.conf"
  echo "cp /mnt/usr/share/systemd/bootctl/loader.conf /mnt/boot/loader"
  if [ "$luksroot" = "1" ]; then
    cryptuuid=$(blkid -s UUID -o value $realrootdev)
    echo "sed -i \"s/PARTUUID=XXXX/\\/dev\\/mapper\\/root/\" /mnt/boot/loader/entries/arch.conf"
    echo "sed -i \"s/XXXX/$parttype/\" /mnt/boot/loader/entries/arch.conf"
    echo "sed -i \"s/root=/cryptdevice=UUID=$cryptuuid:root root=/\" /mnt/boot/loader/entries/arch.conf"
  else
    echo "sed -i \"s/PARTUUID=XXXX/PARTUUID=$partuuid/\" /mnt/boot/loader/entries/arch.conf"
    echo "sed -i \"s/XXXX/$parttype/\" /mnt/boot/loader/entries/arch.conf"
  fi
  echo "cp /mnt/boot/loader/entries/arch.conf /mnt/boot/loader/entries/arch-fallback.conf"
  echo "sed -i \"s/Arch Linux/Arch Linux Fallback/\" /mnt/boot/loader/entries/arch-fallback.conf"
  echo "sed -i \"s/initramfs-linux/initramfs-linux-fallback/\" /mnt/boot/loader/entries/arch-fallback.conf"
  
  cp /mnt/usr/share/systemd/bootctl/loader.conf /mnt/boot/loader
  echo "timeout 2" >> /mnt/boot/loader/loader.conf
  cp /mnt/usr/share/systemd/bootctl/arch.conf /mnt/boot/loader/entries
  
  
  if [ "$luksroot" = "1" ]; then
    sed -i "s/PARTUUID=XXXX/\/dev\/mapper\/root/" /mnt/boot/loader/entries/arch.conf
    sed -i "s/XXXX/$parttype/" /mnt/boot/loader/entries/arch.conf
    sed -i "s/root=/cryptdevice=UUID=$cryptuuid:root root=/" /mnt/boot/loader/entries/arch.conf
  else
    sed -i "s/PARTUUID=XXXX/PARTUUID=$partuuid/" /mnt/boot/loader/entries/arch.conf
    sed -i "s/XXXX/$parttype/" /mnt/boot/loader/entries/arch.conf
  fi
  
  cp /mnt/boot/loader/entries/arch.conf /mnt/boot/loader/entries/arch-fallback.conf
  sed -i "s/Arch Linux/Arch Linux Fallback/" /mnt/boot/loader/entries/arch-fallback.conf
  sed -i "s/initramfs-linux/initramfs-linux-fallback/" /mnt/boot/loader/entries/arch-fallback.conf
  
  pressanykey
}

archsystemdinstallchroot(){
  echo "bootctl --path=/boot install"
  bootctl --path=/boot install
  isvbox=$(lspci | grep "VirtualBox G")
  if [ "$isvbox" ]; then
    echo "VirtualBox detected, creating startup.nsh..."
    echo "\EFI\systemd\systemd-bootx64.efi" > /boot/startup.nsh
  fi
}

archbootloaderrefindmenu(){
  if [ "$1" = "" ]; then
    nextblitem="."
  else
    nextblitem=$1
  fi
  options=()
  options+=("${txtinstall//%1/refind}" "pacstrap refind-efi")
  options+=("${txtedit//%1/refind_linux.conf}" "($txtoptional)")
  sel=$(whiptail --backtitle "$apptitle" --title "$txtbootloaderrefindmenu" --menu "" --cancel-button "$txtback" --default-item "$nextblitem" 0 0 0 \
    "${options[@]}" \
    3>&1 1>&2 2>&3)
  if [ "$?" = "0" ]; then
    case $sel in
      "${txtinstall//%1/refind}")
        archrefindinstall
        nextblitem="${txtedit//%1/refind_linux.conf}"
      ;;
      "${txtedit//%1/refind_linux.conf}")
        $EDITOR /mnt/boot/refind_linux.conf
        nextblitem="${txtedit//%1/refind_linux.conf}"
      ;;
    esac
    archbootloaderrefindmenu "$nextblitem"
  fi

}

archrefindinstall(){
  clear
  
  echo "pacstrap /mnt refind-efi"
  echo "archchroot refindbootloaderinstall $realrootdev"
  echo "echo \"\\\"Arch Linux         \\\" \\\"root=UUID=$rootuuid rw add_efi_memmap\\\"\" > /mnt/boot/refind_linux.conf"
  echo "echo \"\\\"Arch Linux Fallback\\\" \\\"root=UUID=$rootuuid rw add_efi_memmap initrd=/initramfs-linux-fallback.img\\\"\" >> /mnt/boot/refind_linux.conf"
  echo "echo \"\\\"Arch Linux Terminal\\\" \\\"root=UUID=$rootuuid rw add_efi_memmap systemd.unit=multi-user.target\\\"\" >> /mnt/boot/refind_linux.conf"
  
  pacstrap /mnt refind-efi
  archchroot refindbootloaderinstall $realrootdev
  rootuuid=$(blkid -s UUID -o value $realrootdev)
  echo "\"Arch Linux         \" \"root=UUID=$rootuuid rw add_efi_memmap\"" > /mnt/boot/refind_linux.conf
  echo "\"Arch Linux Fallback\" \"root=UUID=$rootuuid rw add_efi_memmap initrd=/initramfs-linux-fallback.img\"" >> /mnt/boot/refind_linux.conf
  echo "\"Arch Linux Terminal\" \"root=UUID=$rootuuid rw add_efi_memmap systemd.unit=multi-user.target\"" >> /mnt/boot/refind_linux.conf
  pressanykey
}

archrefindinstallchroot(){
  #--usedefault /dev/sdXY --alldrivers
  echo "refind-install"
  refind-install
  isvbox=$(lspci | grep "VirtualBox G")
  if [ "$isvbox" ]; then
    echo "VirtualBox detected, creating startup.nsh..."
    echo "\EFI\refind\refind_x64.efi" > /boot/startup.nsh
  fi
}

# ----------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------
# GLOBAL FUNCTIONS
# ----------------------------------------------------------------------------------------
arch_chroot(){
  echo "arch-chroot /mnt /root"
  cp $0 /mnt/root
  chmod 755 /mnt/root/$(basename "$0")
  arch-chroot /mnt /root/$(basename "$0") -chroot $1 $2
  rm /mnt/root/$(basename "$0")
  echo "exit"
}

contains_element() { #{{{
    for e in "${@:2}"; do [[ $e == $1 ]] && break; done;
  }

choose_editor(){
  options=()
  options+=("nano" "")
  options+=("vim" "")
  options+=("vi" "")
  options+=("edit" "")
  sel=$(whiptail --backtitle "$apptitle" --title "$txteditor" --menu "" 0 0 0 \
    "${options[@]}" \
    3>&1 1>&2 2>&3)
  if [ "$?" = "0" ]; then
    EDITOR=$sel
  fi
}

choose_language(){
  options=()
  options+=("english" "")
  
  sel=$(whiptail --backtitle "$apptitle" --title "$txtlanguage" --menu "" 0 0 0 \
    "${options[@]}" \
    3>&1 1>&2 2>&3)
  if [ ! "$?" = "0" ]; then
    case $sel in
    "english")
      clear
      $applanguage="english"
      load_language
    ;;
  esac
  fi
}

load_language(){
  source languages/$applanguage
}

set_keymap(){
  items=$(find /usr/share/kbd/keymaps/ -type f -printf "%f\n" | sort -V)
  options=()
  for item in $items; do
    options+=("${item%%.*}" "")
  done
  keymap=$(whiptail --backtitle "$apptitle" --title "$txtsetkeymap" --menu "" 0 0 0 \
    "${options[@]}" \
    3>&1 1>&2 2>&3)
  if [ "$?" = "0" ]; then
    clear
    echo "loadkeys $keymap"
    loadkeys $keymap
    usingkeymap=$keymap
    pressanykey
    
  fi
}

pressanykey(){
  read -n1 -p "$txtpressanykey"
}

rebootpc(){
  if (whiptail --backtitle "$apptitle" --title "$txtreboot" --yesno "$txtreboot ?" --defaultno 0 0) then
    clear
    reboot
  fi
}

# ----------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------
# START OF THE PROGRAM
# ----------------------------------------------------------------------------------------

# this is for arch-chroot operations
if [ "$1" = "-chroot" ]; then
  # $2 is function to run, $3 is argument
  eval $2 $3
else
# normal program start
  apptitle="Arch Linux Installer - Version: 0.1 (LGPLv3)"
  applanguage="english"

  # load language strings
  load_language
  # load keyboard
  loadkeys $usingkeymap

  # check if efi is available
  if [ -d "/sys/firmware/efi/efivars" ]; then
      efi=1
      echo "EFI Available: YES"
    else
      efi=0
      echo "EFI Available: NO"
    fi

  # main menu start
  echo "Program will start"
  pressanykey
  main_menu
fi
exit 0

# --------------------------------------------------------
