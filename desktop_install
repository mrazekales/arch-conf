#!/bin/bash
# ----------------------------------------------------------------------------------------
# Desktop Installer
# ----------------------------------------------------------------------------------------
# author:     Mrazek Ales
#             https://github.com/mrazekales
#
# project:    https://github.com/mrazekales/myarch-installer
#
# license:    LGPL-3.0 (http://opensource.org/licenses/lgpl-3.0.html)
#
# ----------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------
# GLOBAL STRINGS
# ----------------------------------------------------------------------------------------
apptitle="myArch-installer(Desktop Environment) - Version: 0.1 (LGPLv3)"

txtpressanykey="Press any key to continue."
txtexit="Exit"
txtback="Back"
txtignore="Ignore"
txtoptional="(Optional)"
txtdone="Done"

helper=""
displaymanager=""
desktopenv=""
powermanager=""
networkmanager=""
swapfile="OFF"

# ----------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------
# MAIN MENU
# ----------------------------------------------------------------------------------------
main_menu(){

  if [ "$1" = "" ]; then
    nextitem="."
  else
    nextitem=$1
  fi
  options=()
  options+=("AUR helper" "$helper")
  options+=("Display Manager" "$displaymanager")
  options+=("Desktop Environment" "$desktopenv")
  options+=("" "")
  options+=("Power Manager" "$powermanager")
  options+=("Network Manager" "$networkmanager")
  options+=("Swapfile" "$swapfile")
  
  if [ "$swapfile" = "ON" ]; then
    options+=("         RemoveSwapfile" "")
  fi
  
  sel=$(whiptail --backtitle "$apptitle" --title "Main Menu" --menu "" --cancel-button "$txtexit" --default-item "$nextitem" 0 0 0 \
    "${options[@]}" \
    3>&1 1>&2 2>&3)
  if [ "$?" = "0" ]; then
    case $sel in
      "AUR helper")
        helper_menu
        nextitem="AUR helper"
      ;;
      "Display Manager")
        dm_menu
        nextitem="Display Manager"
      ;;
      "Desktop Environment")
        nextitem="Desktop Environment"
      ;;
      "Power Manager")
        nextitem="Power Manager"
      ;;
      "Network Manager")
        nextitem="Network Manager"
      ;;
      "Swapfile")
        create_swapfile
        nextitem="Swapfile"
      ;;
      "         RemoveSwapfile")
        remove_swapfile
        nextitem="Swapfile"
      ;;
    esac
    main_menu "$nextitem"
  else
    clear
  fi
}
# ----------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------
# BASE_DEV/AUR HELPER
# ----------------------------------------------------------------------------------------
helper_menu(){
  if [ "$1" = "" ]; then
    nextitem="."
  else
    nextitem=$1
  fi
  options=()
  options+=("yay" "")
  sel=$(whiptail --backtitle "$apptitle" --title "Display Manager" --menu "" --cancel-button "$txtexit" --default-item "$nextitem" 0 0 0 \
    "${options[@]}" \
    3>&1 1>&2 2>&3)
  if [ "$?" = "0" ]; then
    case $sel in
      "yay")
        install_yay
      ;;
    esac
  else
    clear
  fi
}

install_yay(){
  clear
  echo "Installing 'base-devel'"
  sudo pacman -S base-devel
  echo "all"
  
  echo "Installing git"
  yes | sudo pacman -S git
  
  echo "git clone https://aur.archlinux.org/yay.git"
  git clone https://aur.archlinux.org/yay.git
  echo "cd yay"
  cd yay
  echo "makepkg -si"
  makepkg -si
  echo "cd .."
  cd ..
  echo "rm -r yay"
  rm -r yay
  echo "$txtdone" 
  helper="yay"
  pressanykey
}

# ----------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------
# DISPLAY MANAGER
# ----------------------------------------------------------------------------------------
dm_menu(){
  if [ "$1" = "" ]; then
    nextitem="."
  else
    nextitem=$1
  fi
  options=()
  options+=("LightDM" "")
  options+=("ly" "")
  sel=$(whiptail --backtitle "$apptitle" --title "Display Manager" --menu "" --cancel-button "$txtexit" --default-item "$nextitem" 0 0 0 \
    "${options[@]}" \
    3>&1 1>&2 2>&3)
  if [ "$?" = "0" ]; then
    case $sel in
      "LightDM")
        install_lightdm
      ;;
      "ly")
        install_ly
      ;;
    esac
  fi
}

install_lightdm(){
  clear
  echo "install LightDM"
  pressanykey
}

install_ly(){
  clear
  echo "Installing Dependencies"
  echo " make pam xorg xorg-init xorg-xauth mcookie"
  yes | sudo pacman -S make pam xorg-xinit xorg-xauth mcookie 

  git clone --recurse-submodules https://github.com/cylgom/ly.git
  cd ly
  make
  sudo make install

  sudo systemctl disable lightdm
  sudo systemctl enable ly.service

  displaymanager="ly"
  pressanykey
}

# ----------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------
# SWAP FILE
# ----------------------------------------------------------------------------------------
create_swapfile(){
  clear
  if [ -e /swapfile ]; then
    echo "Removing old swapfile ..."
    remove_swapfile
  fi

  ramsize=$(cat /proc/meminfo | grep MemTotal | awk '{ print $2 }')
  echo "RAM: $ramsize B"

  if (( $ramsize >= 9000 )); then
    swapsize=$(($ramsize/2000))"M"
  elif (( $ramsize >= 3000 )); then
    swapsize=$(($ramsize/1000))"M"
  else
    swapsize=$(($ramsize/500))"M"
  fi
  echo "SWAP FILE: $swapsize M"
  echo "fallocate -l ${swapsize//%1/M} /swapfile"
  sudo fallocate -l ${swapsize//%1/M} /swapfile
  echo "chmod 600 /swapfile"
  sudo chmod 600 /swapfile
  echo "mkswap /swapfile"
  sudo mkswap /swapfile
  echo "swapon /swapfile"
  sudo swapon /swapfile
  echo "'/swapfile swap swap defaults 0 0' >> /etc/fstab"
  sudo echo "/swapfile swap swap defaults 0 0" >> /etc/fstab
  swapfile="ON"
  pressanykey
}

remove_swapfile(){
clear
  echo "swapoff -a"
  sudo swapoff -a
  echo "rm -f /swapfile"
  sudo rm -f /swapfile
  echo "sed -i '/swapfile swap swap defaults 0 0' /etc/fstab"
  sudo sed -i '/swapfile swap swap defaults 0 0/d' /etc/fstab
  dwapfile="OFF"
  pressanykey
}

# ----------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------
# POWER MANAGER
# ----------------------------------------------------------------------------------------
#power_menu(){}

# ----------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------
# NETWORK MANAGERS
# ----------------------------------------------------------------------------------------
#network_menu(){}

install_networkmanager(){
  echo "Installing networkmanager network-manager-applet"
  yes | sudo pacman -S networkmanager nm-applet 

  echo "Disable dhcpcd and netctl"
  systemctl disable dhcpcd
  systemctl disable netctl-auto

# Using GNOME Keyring
  yes | pacman -S  gnome-keyring libsecret 

  echo "systemctl enable NetworkManager.service"
  systemctl enable NetworkManager.service
  systemctl start NetworkManager.service
  pressanykey
}

install_nftables(){
  echo "Installing nftables < y"
  yes | pacman -S nftables
  echo "systemctl enable nftables.service"
  systemctl enable nftables.service

  echo "Default ruleset"
  nft list ruleset
  nft list ruleset > /etc/nftables.conf
}

install_connman(){
  echo "Installing connman wpa_supplicant bluez openvpn"
  yes | pacman -S connman wpa_supplicant openvpn cmst 

  install_bluez

  echo "Disable dhcpcd and netctl"
  systemctl disable dhcpcd
  systemctl disable netctl-auto

  systemctl enable connman.service
  sudo systemctl start connman.service
  pressanykey
}

install_bluez(){
  echo "Installing bluez bluez-utils"
  yes | sudo pacman -S bluez bluez-utils 
  pressanykey
}

# ----------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------
# GLOBAL FUNCTIONS
# ----------------------------------------------------------------------------------------
choose_editor(){
  options=()
  options+=("nano" "")
  options+=("vim" "")
  options+=("vi" "")
  options+=("edit" "")
  sel=$(whiptail --backtitle "$apptitle" --title "$txteditor" --menu "" 0 0 0 \
    "${options[@]}" \
    3>&1 1>&2 2>&3)
  if [ "$?" = "0" ]; then
    EDITOR=$sel
  fi
}

pressanykey(){
  read -n1 -p "$txtpressanykey"
}

rebootpc(){
  if (whiptail --backtitle "$apptitle" --title "$txtreboot" --yesno "$txtreboot ?" --defaultno 0 0) then
    clear
    reboot
  fi
}

# ----------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------
# START OF THE PROGRAM
# ----------------------------------------------------------------------------------------

# main menu start
echo "git libnew will be installed"
pressanykey

yes | sudo pacman -S git libnewt

main_menu
exit 0

# --------------------------------------------------------
